//
//  KnobStyleKit.swift
//  UISpike
//
//  Created by Matthew Fecher on 7/20/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import Cocoa

public class KnobStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawKnobCanvas(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 120, height: 120), resizing: ResizingBehavior = .aspectFit, knobValue: CGFloat = 1) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 120, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 120)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 120, resizedFrame.height / 120)


        //// Color Declarations
        let black = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let shadowColor = NSColor(red: 1, green: 0.596, blue: 0, alpha: 1)
        let knobBottom = NSColor(red: 0.18, green: 0.18, blue: 0.192, alpha: 1)
        let knobLight = NSColor(red: 0.498, green: 0.498, blue: 0.51, alpha: 1)
        let knobTop2 = NSColor(red: 0.141, green: 0.141, blue: 0.161, alpha: 1)
        let orange2 = NSColor(red: 0.902, green: 0.533, blue: 0.008, alpha: 1)

        //// Gradient Declarations
        let edge2 = NSGradient(colors: [knobBottom, knobBottom.blended(withFraction: 0.5, of: knobTop2)!, knobTop2, knobTop2.blended(withFraction: 0.5, of: knobLight)!, knobLight], atLocations: [0.0, 0.23, 0.41, 0.73, 1.0], colorSpace: NSColorSpace.sRGB)!
        let lowerKnobGradient2 = NSGradient(colors: [knobTop2, knobBottom, knobLight], atLocations: [0.0, 0.51, 1.0], colorSpace: NSColorSpace.sRGB)!

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = NSColor.black.withAlphaComponent(0.46)
        shadow2.shadowOffset = NSSize(width: 2, height: -8)
        shadow2.shadowBlurRadius = 5
        let shadow3 = NSShadow()
        shadow3.shadowColor = knobLight.withAlphaComponent(0.41 * knobLight.alphaComponent)
        shadow3.shadowOffset = NSSize(width: 0, height: -10)
        shadow3.shadowBlurRadius = 5
        let shadow4 = NSShadow()
        shadow4.shadowColor = shadowColor
        shadow4.shadowOffset = NSSize(width: 0, height: 0)
        shadow4.shadowBlurRadius = 12

        //// Variable Declarations
        let knobAngle: CGFloat = -240 * knobValue

        //// Knob
        //// BlackBackground Drawing
        let blackBackgroundPath = NSBezierPath(ovalIn: NSRect(x: 0, y: 0, width: 120, height: 120))
        black.setFill()
        blackBackgroundPath.fill()


        //// GradientKnob 2 Drawing
        let gradientKnob2Path = NSBezierPath(ovalIn: NSRect(x: 9, y: 9, width: 102, height: 102))
        lowerKnobGradient2.draw(in: gradientKnob2Path, angle: 90)


        //// GradientKnob Drawing
        let gradientKnobPath = NSBezierPath(ovalIn: NSRect(x: 15, y: 15, width: 90, height: 90))
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: shadow2.shadowColor!.cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        edge2.draw(in: gradientKnobPath, angle: 90)
        context.endTransparencyLayer()

        ////// GradientKnob Inner Shadow
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(gradientKnobPath.bounds)
        context.setShadow(offset: NSSize.zero, blur: 0, color: nil)

        context.setAlpha(shadow3.shadowColor!.alphaComponent)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let gradientKnobOpaqueShadow = NSShadow()
        gradientKnobOpaqueShadow.shadowColor = shadow3.shadowColor!.withAlphaComponent(1)
        gradientKnobOpaqueShadow.shadowOffset = NSSize(width: shadow3.shadowOffset.width * resizedShadowScale, height: shadow3.shadowOffset.height * resizedShadowScale)
        gradientKnobOpaqueShadow.shadowBlurRadius = shadow3.shadowBlurRadius * resizedShadowScale
        gradientKnobOpaqueShadow.set()

        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        gradientKnobOpaqueShadow.shadowColor!.setFill()
        gradientKnobPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        NSGraphicsContext.restoreGraphicsState()

        NSGraphicsContext.restoreGraphicsState()



        //// IndicatorGroup
        //// Indicator Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 60, y: 60)
        context.rotate(by: (knobAngle - 240) * CGFloat.pi/180)

        let indicatorPath = NSBezierPath(rect: NSRect(x: -3, y: 29, width: 6, height: 17))
        NSGraphicsContext.saveGraphicsState()
        context.setShadow(offset: NSSize(width: shadow4.shadowOffset.width * resizedShadowScale, height: shadow4.shadowOffset.height * resizedShadowScale), blur: shadow4.shadowBlurRadius * resizedShadowScale, color: shadow4.shadowColor!.cgColor)
        orange2.setFill()
        indicatorPath.fill()
        NSGraphicsContext.restoreGraphicsState()


        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc(KnobStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
